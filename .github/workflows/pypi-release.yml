name: Publish to PyPI

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install Qt dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils
      - run: python -m pip install -U pip
      - run: python -m pip install -e .[testing]
      - name: Run tests with Qt backend
        env:
          QT_QPA_PLATFORM: offscreen
        run: pytest tests/ -v --cov=napari_flowreg
      - name: Verify napari plugin registration
        run: python -c "import napari_flowreg; print('napari-flowreg plugin loaded successfully')"

  build:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - run: python -m pip install -U build twine
      - run: python -m build
      - run: python -m twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  wheel-smoke:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Qt dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils
      - run: python -m pip install dist/*.whl
      - run: |
          python -c "import napari_flowreg; print(f'napari-flowreg version: {getattr(napari_flowreg, '__version__', 'unknown')}')"
          python -c "from napari_flowreg.widgets import FlowRegWidget; print('Widget imports working')"
          python -c "import napari; print('napari imports working')"

  sdist-smoke:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Qt dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils
      - run: python -m pip install dist/*.tar.gz
      - run: python -c "import napari_flowreg, importlib; importlib.import_module('napari_flowreg'); print('sdist import OK')"

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [wheel-smoke, sdist-smoke]
    runs-on: ubuntu-latest
    environment: pypi
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - name: Publish RCs to TestPyPI
        if: contains(github.ref_name, 'rc')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          skip-existing: true
      - name: Publish to PyPI
        if: "!contains(github.ref_name, 'rc')"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
